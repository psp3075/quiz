{"version":3,"sources":["API.ts","components/Card.styles.ts","components/Card.tsx","util.ts","assets/pencil.jpg","App.styles.ts","App.tsx","index.tsx"],"names":["Difficulty","Wrapper","styled","div","ButtonWrapper","correct","userClicked","Card","question","answers","callback","userAnswer","questionNum","totalQuestions","className","dangerouslySetInnerHTML","__html","map","answer","correctAnswer","disabled","value","onClick","fetchQuestions","totalQ","difficulty","a","URL","fetch","json","data","results","array","incorrect_answers","correct_answer","sort","Math","random","GlobalStyle","createGlobalStyle","Bimage","TOTAL_QUESTIONS","App","useState","loading","setLoading","questions","setQuestions","number","setNumber","userAnswers","setUserAnswers","score","setScore","gameOver","setGameOver","console","log","startTrivia","EASY","newQuestions","length","undefined","e","currentTarget","prev","answerObject","nextQuestion","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ace373e3.chunk.js","sourcesContent":["import { shuffleArray } from \"./util\";\r\n\r\nexport type Question = {\r\n  category: string;\r\n  correct_answer: string;\r\n  difficulty: string;\r\n  incorrect_answers: string[];\r\n  question: string;\r\n  type: string;\r\n};\r\nexport type QuestionState = Question & { answers: string[] };\r\n\r\nexport enum Difficulty {\r\n  EASY = \"easy\",\r\n  MEDIUM = \"medium\",\r\n  HARD = \"hard\",\r\n}\r\n\r\nexport const fetchQuestions = async (\r\n  totalQ: number,\r\n  difficulty: Difficulty\r\n) => {\r\n  const URL = `https://opentdb.com/api.php?amount=${totalQ}&difficulty=${difficulty}&type=multiple`;\r\n  const data = await (await fetch(URL)).json();\r\n  //console.log(data)\r\n  return data.results.map((question: Question) => ({\r\n    ...question,\r\n    answers: shuffleArray([\r\n      ...question.incorrect_answers,\r\n      question.correct_answer,\r\n    ]),\r\n  }));\r\n};\r\n","import styled from \"styled-components/macro\";\r\n\r\nexport const Wrapper = styled.div`\r\n  max-width: 500px;\r\n  border-radius: 10px;\r\n  padding: 20px;\r\n  box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\r\n  text-align: center;\r\n\r\n  p {\r\n    font-size: 1.2rem;\r\n  }\r\n`;\r\n\r\ntype ButtonWrapperProps = {\r\n  correct: boolean;\r\n  userClicked: boolean;\r\n};\r\n\r\nexport const ButtonWrapper = styled.div<ButtonWrapperProps>`\r\ntransistion: all 0.3s ease;\r\n\r\n:hover{\r\n    opacity : 0.8;\r\n}\r\n\r\nbutton{\r\n    cursor:pointer;\r\n    user-select:none;\r\n    font-size:0.9rem;\r\n    width:100%;\r\n    height:40px;\r\n    margin:5px 0;\r\n    background:${({ correct, userClicked }) =>\r\n      correct\r\n        ? \"#66DE93\"\r\n        : !correct && userClicked\r\n        ? \"#FF2442\"\r\n        : \"#fff\"};\r\n\r\n        border:3px solid #000;\r\n        box-shadow:1px 2px 0px rgba(0,0,0,0.1);\r\n        border-radius:10px;\r\n        color:#000;\r\n        text-shadow: 0px 1px 0px rgba(0,0,0,0.25) ;\r\n\r\n`;\r\n","import React from \"react\";\r\nimport { AnswerObject } from \"../App\";\r\nimport { Wrapper, ButtonWrapper } from \"./Card.styles\";\r\n\r\ntype Props = {\r\n  question: string;\r\n  answers: string[];\r\n  callback: (e: React.MouseEvent<HTMLButtonElement>) => void;\r\n  userAnswer: AnswerObject | undefined;\r\n  questionNum: number;\r\n  totalQuestions: number;\r\n};\r\n\r\nconst Card: React.FC<Props> = ({\r\n  question,\r\n  answers,\r\n  callback,\r\n  userAnswer,\r\n  questionNum,\r\n  totalQuestions,\r\n}) => {\r\n  return (\r\n    <Wrapper>\r\n      <p className=\"card__number\">\r\n        Question : {questionNum}/{totalQuestions}\r\n      </p>\r\n      <p dangerouslySetInnerHTML={{ __html: question }} />\r\n      <div>\r\n        {answers.map((answer) => (\r\n          <ButtonWrapper\r\n            key={answer}\r\n            correct={userAnswer?.correctAnswer === answer}\r\n            userClicked={userAnswer?.answer === answer}\r\n          >\r\n            <button disabled={!!userAnswer} value={answer} onClick={callback}>\r\n              <span dangerouslySetInnerHTML={{ __html: answer }} />\r\n            </button>\r\n          </ButtonWrapper>\r\n        ))}\r\n      </div>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","export const shuffleArray=(array:any[])=> [...array].sort(()=>Math.random() - 0.5)","export default __webpack_public_path__ + \"static/media/pencil.23e06f01.jpg\";","import styled,{createGlobalStyle} from 'styled-components';\r\nimport Bimage from './assets/pencil.jpg';\r\n\r\nexport const GlobalStyle=createGlobalStyle `\r\nhtml{\r\n    height:100%;\r\n}\r\n\r\nbody{\r\n    background-image:url(${Bimage});\r\n    background-size:cover;\r\n    margin:0;\r\n    padding :0 20px;\r\n    display:flex;\r\n    justify-content:center;\r\n}\r\n\r\n*{\r\n    box-sizing:border-box;\r\n    font-family:'Poppins',sans-serif;\r\n}\r\n`\r\n\r\nexport const Wrapper=styled.div `\r\ndisplay:flex;\r\nflex-direction:column;\r\nalign-items:center;\r\n\r\n>p{\r\n    color:#fff\r\n}\r\n\r\n.app__score{\r\n    color:#FFF8E5;\r\n    font-size:2rem;\r\n    margin-top:10px;\r\n    margin-bottom:10px;\r\n}\r\n\r\nh1{\r\n    font-size:80px;\r\n    text-align:center;\r\n    margin:30px;\r\n}\r\n\r\n.app__start,.app__next{\r\n    cursor:pointer;\r\n    border:2px solid #fff;\r\n    box-shadow:0px 5px 10px rgba(0,0,0,0.25);\r\n    border-radius:20px;\r\n    height:40px;\r\n    margin:20px 0;\r\n    padding:0 40px;\r\n\r\n    :hover{\r\n        transform:scale(0.95);\r\n    }\r\n}\r\n\r\n.app__start{\r\n    max-width:200px;\r\n    \r\n}\r\n`","import React, { useState } from \"react\";\nimport Card from \"./components/Card\";\nimport { fetchQuestions } from \"./API\";\nimport { Difficulty, QuestionState } from \"./API\";\nimport { GlobalStyle,Wrapper } from \"./App.styles\";\n\nexport type AnswerObject = {\n  question: string;\n  answer: string;\n  correct: boolean;\n  correctAnswer: string;\n};\n\nconst TOTAL_QUESTIONS = 10;\n\nfunction App() {\n  const [loading, setLoading] = useState(false);\n  const [questions, setQuestions] = useState<QuestionState[]>([]);\n  const [number, setNumber] = useState(0);\n  const [userAnswers, setUserAnswers] = useState<AnswerObject[]>([]);\n  const [score, setScore] = useState(0);\n  const [gameOver, setGameOver] = useState(true);\n\n  console.log(questions);\n\n  const startTrivia = async () => {\n    setLoading(true);\n    setGameOver(false);\n    const newQuestions = await fetchQuestions(TOTAL_QUESTIONS, Difficulty.EASY);\n    setQuestions(newQuestions);\n    setScore(0);\n    setUserAnswers([]);\n    setNumber(0);\n    setLoading(false);\n  };\n\n  const checkAnswer = (e: React.MouseEvent<HTMLButtonElement>) => {\n    if (!gameOver) {\n      const answer = e.currentTarget.value;\n\n      const correct = questions[number].correct_answer === answer;\n\n      if (correct) setScore((prev) => prev + 1);\n      const answerObject = {\n        question: questions[number].question,\n        answer,\n        correct,\n        correctAnswer: questions[number].correct_answer,\n      };\n      setUserAnswers((prev) => [...prev, answerObject]);\n    }\n  };\n\n  const nexQuestion = () => {\n    const nextQuestion = number + 1;\n    if (nextQuestion === TOTAL_QUESTIONS) {\n      setGameOver(true);\n    } else {\n      setNumber(nextQuestion);\n    }\n  };\n\n  return (\n    <>\n    <GlobalStyle/>\n    <Wrapper>\n      <h1>Quiz Time</h1>\n      {(gameOver || userAnswers.length === TOTAL_QUESTIONS) && (\n        <button className=\"app__start\" onClick={startTrivia}>\n          Start\n        </button>\n      )}\n      {!gameOver && <p className=\"app__score\">Points scored : {score}</p>}\n      {loading && <p>Ready?</p>}\n      {!loading && !gameOver && userAnswers.length !==TOTAL_QUESTIONS ? (\n        <Card\n          questionNum={number + 1}\n          totalQuestions={TOTAL_QUESTIONS}\n          question={questions[number].question}\n          answers={questions[number].answers}\n          userAnswer={userAnswers ? userAnswers[number] : undefined}\n          callback={checkAnswer}\n        />\n      ): (!gameOver && !loading && <><h2>Game over !!!</h2><h3>Click 'start' to play again</h3></>)}\n      {!gameOver &&\n        !loading &&\n        userAnswers.length === number + 1 &&\n        number !== TOTAL_QUESTIONS -1 && \n          <button className=\"app__next\" onClick={nexQuestion}>\n            Next\n          </button>}\n          </Wrapper>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}